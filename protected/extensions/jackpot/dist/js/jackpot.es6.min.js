"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var JACKPOT_DEFAULT = {
  nextRoundIn: 10,
  gameStartIn: 90,
  roulette: {
    startAngle: 90,
    container: '#jackpot-roulette',
    height: 500,
    width: 500,
    strokeStyle: '#1A1B20',
    colorPlaceholder: '#202328'
  },
  round: {
    container: '#jackpot-round'
  },
  messages: {
    currentPot: 'Current Pot',
    nextRoundIn: 'Next Round in',
    gameStartIn: 'Game Starting In',
    rolling: 'Rolling',
    roundEnded: 'ROUND ENDED',
    noPlayers: 'No players joined',
    awaiting: 'Awaiting PF'
  },
  url:'',
  onNextRound: function onNextRound(scope) {},
  onGameEnd: function onGameEnd(scope, winner, players) {},
  onClickPlayer: function onClickPlayer(scope, player) {},
  onClickWinner: function onClickWinner(scope, winner) {}
};

var Jackpot = /*#__PURE__*/function () {
  function Jackpot(options) {
    _classCallCheck(this, Jackpot);

    this.className = 'jackpot';
    this.options = this._extends(JACKPOT_DEFAULT, options);
    this.players = [];
    this.winner = false;
    this.laps = {};
    this.roundID = new Date().getTime();
  }

  _createClass(Jackpot, [{
    key: "_extends",
    value: function _extends(target, source) {
      var _this = this;

      var isObject = function isObject(obj) {
        return obj && _typeof(obj) === 'object';
      };

      if (!isObject(target) || !isObject(source)) {
        return source;
      }

      Object.keys(source).forEach(function (key) {
        var targetValue = target[key];
        var sourceValue = source[key];

        if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {
          target[key] = targetValue.concat(sourceValue);
        } else if (isObject(targetValue) && isObject(sourceValue)) {
          target[key] = _this._extends(Object.assign({}, targetValue), sourceValue);
        } else {
          target[key] = sourceValue;
        }
      });
      return target;
    }
  }, {
    key: "_ksort",
    value: function _ksort(obj) {
      var keys = Object.keys(obj).sort(),
          sortedObj = {};

      for (var i in keys) {
        sortedObj[keys[i]] = obj[keys[i]];
      }

      return sortedObj;
    }
  }, {
    key: "_colorRandom",
    value: function _colorRandom() {
      var light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var r = Math.floor(Math.random() * 256);
      var g = Math.floor(Math.random() * 256);
      var b = Math.floor(Math.random() * 256);

      if (light < 0) {
        r = (1 + light) * r;
        g = (1 + light) * g;
        b = (1 + light) * b;
      }

      return "".concat(r, ", ").concat(g, ", ").concat(b);
    }
  }, {
    key: "_degreesToRadians",
    value: function _degreesToRadians(degrees) {
      if (degrees == 0) return degrees;
      return (360 - degrees) * (Math.PI / 180);
    }
  }, {
    key: "_radiansToDegrees",
    value: function _radiansToDegrees(radians) {
      var startAngle = this._degreesToRadians(this.options.roulette.startAngle);

      if (radians == 0) return radians;
      return (radians - startAngle) * (180 / Math.PI);
    }
  }, {
    key: "_calculateDivDimensions",
    value: function _calculateDivDimensions(percent) {
      var width = this.options.roulette.width * percent;
      var height = this.options.roulette.height * percent;
      var mWidth = width / 2;
      var mHeight = height / 2;
      return {
        width: width,
        height: height,
        marginTop: mWidth,
        marginLeft: mHeight
      };
    }
  }, {
    key: "_drawWheelSlice",
    value: function _drawWheelSlice(ctx, centerX, centerY, radius, startAngle, endAngle, color) {
      ctx.fillStyle = color;
      ctx.strokeStyle = this.options.roulette.strokeStyle;
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.arc(centerX, centerY, radius, startAngle, endAngle);
      ctx.fill();
      ctx.stroke();
      ctx.closePath();
    }
  }, {
    key: "_buildWheel",
    value: function _buildWheel() {
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext("2d");
      canvas.width = this.options.roulette.width;
      canvas.height = this.options.roulette.height;

      var startAngle = this._degreesToRadians(this.options.roulette.startAngle);

      var startPercent = 0;

      for (var key in this.players) {
        var player = this.players[key];
        var endPercent = player.info.total / this.getTotalCurrentRound();
        var sliceAngle = 2 * Math.PI * player.info.total / this.getTotalCurrentRound();
        var endAngle = startAngle + sliceAngle;

        this._drawWheelSlice(ctx, canvas.width / 2, canvas.height / 2, Math.min(canvas.width / 2, canvas.height / 2), startAngle, endAngle, "rgb(".concat(player.color, ")"));

        this.players[key].percent = {
          start: startPercent,
          end: startPercent + endPercent
        };
        this.players[key].degrees = {
          start: this._radiansToDegrees(startAngle),
          end: this._radiansToDegrees(endAngle)
        };
        startPercent += endPercent;
        startAngle += sliceAngle;
      }

      requestAnimationFrame(function () {
        canvas;
      });
      var wheel = document.querySelector(".".concat(this.className, "-roulette-wheel"));
      wheel.innerHTML = "";
      wheel.appendChild(canvas);
    }
  }, {
    key: "_buildRound",
    value: function _buildRound() {
      document.querySelectorAll("[data-round='".concat(this.roundID, "']")).forEach(function (e) {
        return e.parentNode.removeChild(e);
      });

      var playes = this._ksort(this.players);

      for (var key in playes) {
        this._addPlayer(playes[key]);
      }

      document.querySelector(".".concat(this.className, "-roulette-info-total-amount")).innerHTML = this.getTotalCurrentRound().toFixed(2);
    }
  }, {
    key: "_spinner",
    value: function _spinner() {
      var dimensions = this._calculateDivDimensions(0.6);

      var spinner = document.createElement("div");
      spinner.className = "".concat(this.className, "-roulette-spinner");
      spinner.style.cssText = "\n            width: ".concat(dimensions.width, "px;\n            height: ").concat(dimensions.height, "px;\n            margin-top: -").concat(dimensions.marginTop, "px;\n            margin-left: -").concat(dimensions.marginLeft, "px;\n        ");
      spinner.innerHTML = '<img src="'+this.options.url+'/dist/arrow.png">';
      return spinner;
    }
  }, {
    key: "_stateInfo",
    value: function _stateInfo() {
      var dimensions = this._calculateDivDimensions(0.6);

      var info = document.createElement("div");
      var infoTotal = document.createElement("div");
      var infoTotalAmount = document.createElement("h3");
      var infoState = document.createElement("div");
      var infoStateEvent = document.createElement("span");
      var infoStateCountDown = document.createElement("h3");
      info.className = "".concat(this.className, "-roulette-info");
      infoTotal.className = "".concat(this.className, "-roulette-info-total");
      infoTotalAmount.className = "".concat(this.className, "-roulette-info-total-amount");
      infoState.className = "".concat(this.className, "-roulette-info-state");
      infoStateEvent.className = "".concat(this.className, "-roulette-info-state-event");
      infoStateCountDown.className = "".concat(this.className, "-roulette-info-state-countdown");
      infoTotal.innerHTML = "<span>".concat(this.options.messages.currentPot, "</span>");
      infoTotalAmount.innerHTML = '0.00';
      infoTotal.appendChild(infoTotalAmount);
      infoStateEvent.innerHTML = this.options.messages.nextRoundIn;
      infoStateCountDown.innerHTML = this.options.nextRoundIn;
      infoState.appendChild(infoStateEvent);
      infoState.appendChild(infoStateCountDown);
      info.style.cssText = "\n            width: ".concat(dimensions.width, "px;\n            height: ").concat(dimensions.height, "px;\n            margin-top: -").concat(dimensions.marginTop, "px;\n            margin-left: -").concat(dimensions.marginLeft, "px;\n        ");
      infoTotal.style.cssText = "\n            height: ".concat(dimensions.height / 2, "px;\n        ");
      infoState.style.cssText = "\n            height: ".concat(dimensions.height / 2, "px;\n        ");
      info.appendChild(infoTotal);
      info.appendChild(infoState);
      return info;
    }
  }, {
    key: "_initRoulette",
    value: function _initRoulette() {
      var element = document.querySelector(this.options.roulette.container);
      var roulette = document.createElement('div');
      var wheel = document.createElement('div');

      var spinner = this._spinner();

      var info = this._stateInfo();

      roulette.className = "".concat(this.className, "-roulette");
      wheel.className = "".concat(this.className, "-roulette-wheel");
      wheel.appendChild(this._placeHolderRoulette());
      roulette.appendChild(wheel);
      roulette.appendChild(info);
      roulette.appendChild(spinner);
      element.appendChild(roulette);
    }
  }, {
    key: "_initRound",
    value: function _initRound() {
      var element = document.querySelector(this.options.round.container);
      var round = document.createElement('div');
      var roundInfo = document.createElement('div');
      round.className = "".concat(this.className, "-round");
      roundInfo.className = "".concat(this.className, "-round-info");
      round.appendChild(roundInfo);
      element.appendChild(round);
    }
  }, {
    key: "_placeHolderRoulette",
    value: function _placeHolderRoulette() {
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext("2d");
      canvas.width = this.options.roulette.width;
      canvas.height = this.options.roulette.height;
      var sliceAngle = 2 * Math.PI * 100 / 100;

      var startAngle = this._degreesToRadians(this.options.roulette.startAngle);

      this._drawWheelSlice(ctx, canvas.width / 2, canvas.height / 2, Math.min(canvas.width / 2, canvas.height / 2), startAngle, startAngle + sliceAngle, this.options.roulette.colorPlaceholder);

      return canvas;
    }
  }, {
    key: "_addNotWinner",
    value: function _addNotWinner() {
      var roundInfo = document.querySelector(".".concat(this.className, "-round-info"));
      var player = document.createElement('div');
      var playerRound = document.createElement('div');
      var playerUser = document.createElement('div');
      player.className = "".concat(this.className, "-round-winner");
      player.dataset.round = this.roundID;
      playerRound.className = "".concat(this.className, "-round-winner-info");
      playerUser.className = "".concat(this.className, "-round-winner-nouser");
      player.style.cssText = "\n            background: linear-gradient(90deg,rgba(45,48,52,.7) 0,rgba(45,48,52,.4) 40%,rgba(45,48,52,.3) 70%,rgba(45,48,52,.2) 80%,rgba(45,48,52,.1) 100%);\n        ";
      playerRound.innerHTML = "\n            <h2>".concat(this.options.messages.roundEnded, "</h2>\n            <div>\n                <span><strong>Round</strong> #").concat(this.roundID, "</span>\n            </div>\n            <div>\n                <span><strong>Ticket</strong> #62.4265</span>\n            </div>\n        ");
      playerUser.innerHTML = "<span>".concat(this.options.messages.noPlayers, "</span>");
      player.appendChild(playerRound);
      player.appendChild(playerUser);
      roundInfo.prepend(player);
    }
  }, {
    key: "_addWinner",
    value: function _addWinner() {
      var _this2 = this;

      var data = this.winner;
      var roundInfo = document.querySelector(".".concat(this.className, "-round-info"));
      var player = document.createElement('div');
      var playerRound = document.createElement('div');
      var playerUser = document.createElement('div');
      player.className = "".concat(this.className, "-round-winner");
      player.dataset.round = this.roundID;
      playerRound.className = "".concat(this.className, "-round-winner-info");
      playerUser.className = "".concat(this.className, "-round-winner-user");
      player.style.cssText = "\n            background: linear-gradient(90deg, \n                rgba(".concat(data.color, ", 0.5) 0%,\n                rgba(").concat(data.color, ", 0.4) 40%,\n                rgba(").concat(data.color, ", 0.3) 70%,\n                rgba(").concat(data.color, ", 0.2) 80%,\n                rgba(").concat(data.color, ", 0.1) 100%);\n        ");
      playerRound.innerHTML = "\n            <h2>ROUND ENDED</h2>\n            <div>\n                <span><strong>Round</strong> #".concat(this.roundID, "</span>\n            </div>\n            <div>\n                <span><strong>Ticket</strong> #").concat((this.laps.angle / 360 * 100).toFixed(4), "</span>\n            </div>\n        ");
      playerUser.innerHTML = "\n            <h3>".concat(data.info.name, "</h3>\n            <div>\n                <span><strong>").concat(this.getTotalCurrentRound().toFixed(2), "</strong> with <strong>").concat(((data.percent.end - data.percent.start) * 100).toFixed(4), "%</strong> chance</span>\n            </div>\n        ");
      player.appendChild(playerRound);
      player.appendChild(playerUser);
      player.addEventListener("click", function () {
        _this2.options.onClickWinner(_this2, data);
      });
      roundInfo.prepend(player);
    }
  }, {
    key: "_addPlayer",
    value: function _addPlayer(data) {
      var _this3 = this;

      var roundInfo = document.querySelector(".".concat(this.className, "-round-info"));
      var player = document.createElement('div');
      var playerHighlight = document.createElement('div');
      var playerInfo = document.createElement('div');
      var playerSeparator = document.createElement('div');
      var playerDeposit = document.createElement('div');
      player.className = "".concat(this.className, "-round-player");
      player.dataset.round = this.roundID;
      playerHighlight.className = "".concat(this.className, "-round-player-highlight");
      playerInfo.className = "".concat(this.className, "-round-player-info jackpot-round-box");
      playerSeparator.className = "".concat(this.className, "-round-player-separator");
      playerDeposit.className = "".concat(this.className, "-round-player-deposit jackpot-round-box");
      player.style.cssText = "\n            background: linear-gradient(90deg, \n                rgba(".concat(data.color, ", 0.22) 0%,\n                rgba(").concat(data.color, ", 0.1) 10%,\n                rgba(").concat(data.color, ", 0.05) 20%,\n                rgba(0, 0, 0, 0.1) 35%,\n                rgba(0, 0, 0, 0.1) 100%)\n        ");
      playerHighlight.style.cssText = "background-color: rgb(".concat(data.color, ")");
      playerInfo.innerHTML = "\n            <span>".concat(data.info.name, "</span>\n            <h3 style=\"color: rgb(").concat(data.color, ");\">\n                ").concat((data.percent.start * 100).toFixed(4), " - ").concat((data.percent.end * 100).toFixed(4), "\n            </h3>\n        ");
      playerDeposit.innerHTML = "\n                <div><span>Deposited 0 items</span></div>\n                <h4>Total value ".concat(data.info.total.toFixed(2), "</h4>\n        ");
      player.appendChild(playerInfo);
      player.appendChild(playerSeparator);
      player.appendChild(playerDeposit);
      player.appendChild(playerHighlight);
      player.addEventListener("click", function () {
        _this3.options.onClickPlayer(_this3, data);
      });
      roundInfo.prepend(player);
    }
  }, {
    key: "getTotalCurrentRound",
    value: function getTotalCurrentRound() {
      var total = 0;

      for (var key in this.players) {
        total += this.players[key].info.total;
      }

      return total;
    }
  }, {
    key: "_setWinner",
    value: function _setWinner() {
      var winner = false;

      for (var key in this.players) {
        var player = this.players[key];

        if (this.laps.angle >= player.degrees.start && this.laps.angle <= player.degrees.end) {
          winner = this.players[key];
          break;
        }
      }

      this.winner = winner;
    }
  }, {
    key: "getWinner",
    value: function getWinner() {
      return this.winner;
    }
  }, {
    key: "_setLaps",
    value: function _setLaps() {
      var rand = Math.random() * (360 * 4 - 360 * 10) + 360 * 10;
      var angle = rand / 360;
      angle = (angle - parseInt(angle.toString().split('.')[0])) * 360;
      this.laps = {
        rand: rand,
        angle: angle
      };
    }
  }, {
    key: "_rolling",
    value: function _rolling() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        document.querySelector(".".concat(_this4.className, "-roulette-info-state-event")).innerHTML = _this4.options.messages.rolling;
        document.querySelector(".".concat(_this4.className, "-roulette-info-state-countdown")).innerHTML = "";
        setTimeout(function () {
          document.querySelector(".".concat(_this4.className, "-roulette-spinner")).style.cssText += "transform:rotate(" + _this4.laps.rand + "deg)";
          setTimeout(function () {
            resolve(_this4);
          }, 5000);
        }, 1000);
      });
    }
  }, {
    key: "_nextRound",
    value: function _nextRound() {
      var _this5 = this;

      return new Promise(function (resolve, reject) {
        var seconds = _this5.options.nextRoundIn;
        var countdown = setInterval(function () {
          seconds--;
          document.querySelector(".".concat(_this5.className, "-roulette-info-state-countdown")).innerHTML = seconds;
          if (seconds <= 0) clearInterval(countdown);
        }, 1000);
        setTimeout(function () {
          resolve(_this5);
        }, _this5.options.nextRoundIn * 1000);
      });
    }
  }, {
    key: "_gameStart",
    value: function _gameStart() {
      var _this6 = this;

      return new Promise(function (resolve, reject) {
        var seconds = _this6.options.gameStartIn;
        document.querySelector(".".concat(_this6.className, "-roulette-info-state-event")).innerHTML = _this6.options.messages.gameStartIn;
        document.querySelector(".".concat(_this6.className, "-roulette-info-state-countdown")).innerHTML = seconds;
        var countdown = setInterval(function () {
          seconds--;
          document.querySelector(".".concat(_this6.className, "-roulette-info-state-countdown")).innerHTML = seconds;
          if (seconds <= 0) clearInterval(countdown);
        }, 1000);
        setTimeout(function () {
          _this6._setLaps();

          _this6._setWinner();

          resolve(_this6);
        }, _this6.options.gameStartIn * 1000);
      });
    }
  }, {
    key: "_resert",
    value: function _resert() {
      var _this7 = this;

      return new Promise(function (resolve, reject) {
        var wheel = document.querySelector(".".concat(_this7.className, "-roulette-wheel"));
        var spinner = document.querySelector(".".concat(_this7.className, "-roulette-spinner"));
        var infoStateEvent = document.querySelector(".".concat(_this7.className, "-roulette-info-state-event"));
        var infoStateCountDown = document.querySelector(".".concat(_this7.className, "-roulette-info-state-countdown"));
        infoStateEvent.innerHTML = _this7.options.messages.nextRoundIn;
        infoStateCountDown.innerHTML = _this7.options.nextRoundIn;
        wheel.innerHTML = "";
        wheel.appendChild(_this7._placeHolderRoulette());
        _this7.players = [];
        _this7.winner = false;
        _this7.laps = {};
        document.querySelector(".".concat(_this7.className, "-roulette-info-total-amount")).innerHTML = '0.00';
        spinner.style.setProperty('transition', 'all 1s');
        spinner.style.removeProperty('transform');
        setTimeout(function () {
          spinner.style.setProperty('transition', 'all 5s');
          resolve(_this7);
        }, 1000);
      });
    }
  }, {
    key: "_initEvents",
    value: function _initEvents() {
      var _this8 = this;

      this._nextRound().then(function (scope) {
        _this8.options.onNextRound(scope);

        return _this8._gameStart();
      }).then(function (scope) {
        document.querySelector(".".concat(_this8.className, "-roulette-info-state-countdown")).innerHTML = _this8.options.messages.awaiting;
        return _this8.options.onGameEnd(scope, _this8.winner, _this8.players);
      }).then(function () {
        return _this8._rolling();
      }).then(function (scope) {
        if (!_this8.winner) {
          _this8._addNotWinner();
        } else {
          _this8._addWinner();
        }

        return _this8._resert();
      }).then(function (scope) {
        _this8.roundID = new Date().getTime();

        _this8._initEvents();
      });
    }
  }, {
    key: "bidUp",
    value: function bidUp() {
      var player = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.players.push({
        info: player,
        color: this._colorRandom(),
        degrees: [],
        percent: 0
      });

      this._buildWheel();

      this._buildRound();
    }
  }, {
    key: "init",
    value: function init() {
      this._initRoulette();

      this._initRound();

      this._initEvents();
    }
  }]);

  return Jackpot;
}();