"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var JACKPOT_DEFAULT = {
  roulette: {
    startAngle: 90,
    container: '#jackpot-roulette',
    height: 500,
    width: 500,
    strokeStyle: '#1A1B20',
    colorPlaceholder: '#202328'
  },
  spinner: {
    img: 'dist/arrow.png',
    secondsReset: 1
  },
  round: {
    container: '#jackpot-round'
  },
  messages: {
    currentPot: 'Current Pot',
    nextRoundIn: 'Next Round in',
    gameStartIn: 'Game Starting In',
    rolling: 'Rolling',
    roundEnded: 'ROUND ENDED',
    noPlayers: 'No players joined',
    awaiting: 'Awaiting PF',
    results: 'Get Results',
    lostConnection: 'Lost Connection'
  },
  onNextRound: function onNextRound(scope) {},
  onGameStart: function onGameStart(scope) {},
  onGameEnd: function onGameEnd(scope) {},
  onClickPlayer: function onClickPlayer(scope, player) {},
  onClickWinner: function onClickWinner(scope, winner) {},
  firebase: {}
};

var JackPot = /*#__PURE__*/function () {
  function JackPot() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, JackPot);

    this.className = 'jackpot';
    this.options = this._extends(JACKPOT_DEFAULT, options);
    this.firebase = false;
    this.db = false;
    this.cn = false;
    this.id = false;
    this.ticket = "";
    this.round = {};
    this.players = [];
    this.countDown = false;

    this._initFirebase();

    this._watchRound();
  }

  _createClass(JackPot, [{
    key: "_extends",
    value: function _extends(target, source) {
      var _this = this;

      var isObject = function isObject(obj) {
        return obj && _typeof(obj) === 'object';
      };

      if (!isObject(target) || !isObject(source)) {
        return source;
      }

      Object.keys(source).forEach(function (key) {
        var targetValue = target[key];
        var sourceValue = source[key];

        if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {
          target[key] = targetValue.concat(sourceValue);
        } else if (isObject(targetValue) && isObject(sourceValue)) {
          target[key] = _this._extends(Object.assign({}, targetValue), sourceValue);
        } else {
          target[key] = sourceValue;
        }
      });
      return target;
    }
  }, {
    key: "_ksort",
    value: function _ksort(obj) {
      var keys = Object.keys(obj).sort(),
          sortedObj = {};

      for (var i in keys) {
        sortedObj[keys[i]] = obj[keys[i]];
      }

      return sortedObj;
    }
  }, {
    key: "_colorRandom",
    value: function _colorRandom() {
      var light = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var r = Math.floor(Math.random() * 256);
      var g = Math.floor(Math.random() * 256);
      var b = Math.floor(Math.random() * 256);

      if (light < 0) {
        r = (1 + light) * r;
        g = (1 + light) * g;
        b = (1 + light) * b;
      }

      return "".concat(r, ", ").concat(g, ", ").concat(b);
    }
  }, {
    key: "_degreesToRadians",
    value: function _degreesToRadians(degrees) {
      if (degrees == 0) return degrees;
      return (360 - degrees) * (Math.PI / 180);
    }
  }, {
    key: "_radiansToDegrees",
    value: function _radiansToDegrees(radians) {
      var startAngle = this._degreesToRadians(this.options.roulette.startAngle);

      if (radians == 0) return radians;
      return (radians - startAngle) * (180 / Math.PI);
    }
  }, {
    key: "_calculateDivDimensions",
    value: function _calculateDivDimensions(percent) {
      var width = this.options.roulette.width * percent;
      var height = this.options.roulette.height * percent;
      var mWidth = width / 2;
      var mHeight = height / 2;
      return {
        width: width,
        height: height,
        marginTop: mWidth,
        marginLeft: mHeight
      };
    }
  }, {
    key: "_drawWheelSlice",
    value: function _drawWheelSlice(ctx, centerX, centerY, radius, startAngle, endAngle, color) {
      ctx.fillStyle = color;
      ctx.strokeStyle = this.options.roulette.strokeStyle;
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      ctx.arc(centerX, centerY, radius, startAngle, endAngle);
      ctx.fill();
      ctx.stroke();
      ctx.closePath();
    }
  }, {
    key: "_buildWheel",
    value: function _buildWheel() {
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext("2d");
      canvas.width = this.options.roulette.width;
      canvas.height = this.options.roulette.height;

      var startAngle = this._degreesToRadians(this.options.roulette.startAngle);

      var startPercent = 0;

      for (var key in this.players) {
        var player = this.players[key];
        var endPercent = player.info.total / this.getTotalCurrentRound();
        var sliceAngle = 2 * Math.PI * player.info.total / this.getTotalCurrentRound();
        var endAngle = startAngle + sliceAngle;

        this._drawWheelSlice(ctx, canvas.width / 2, canvas.height / 2, Math.min(canvas.width / 2, canvas.height / 2), startAngle, endAngle, "rgb(".concat(player.color, ")"));

        this.players[key].percent = {
          start: startPercent,
          end: startPercent + endPercent
        };
        this.players[key].degrees = {
          start: this._radiansToDegrees(startAngle),
          end: this._radiansToDegrees(endAngle)
        };
        startPercent += endPercent;
        startAngle += sliceAngle;
      }

      var wheel = document.querySelector(".".concat(this.className, "-roulette-wheel"));
      wheel.innerHTML = "";
      wheel.appendChild(canvas);
      document.querySelector(".".concat(this.className, "-roulette-info-total-amount")).innerHTML = this.getTotalCurrentRound();
    }
  }, {
    key: "_buildRound",
    value: function _buildRound() {
      document.querySelectorAll("[data-round='".concat(this.id, "']")).forEach(function (e) {
        return e.parentNode.removeChild(e);
      });

      for (var key in this.players) {
        this._addPlayer(this.players[key]);
      }
    }
  }, {
    key: "_placeHolderRoulette",
    value: function _placeHolderRoulette() {
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext("2d");
      canvas.width = this.options.roulette.width;
      canvas.height = this.options.roulette.height;
      var sliceAngle = 2 * Math.PI * 100 / 100;

      var startAngle = this._degreesToRadians(this.options.roulette.startAngle);

      this._drawWheelSlice(ctx, canvas.width / 2, canvas.height / 2, Math.min(canvas.width / 2, canvas.height / 2), startAngle, startAngle + sliceAngle, this.options.roulette.colorPlaceholder);

      return canvas;
    }
  }, {
    key: "_spinner",
    value: function _spinner() {
      var dimensions = this._calculateDivDimensions(0.65);

      var spinner = document.createElement("div");
      spinner.className = "".concat(this.className, "-roulette-spinner");
      spinner.style.cssText = "\n            width: ".concat(dimensions.width, "px;\n            height: ").concat(dimensions.height, "px;\n            margin-top: -").concat(dimensions.marginTop, "px;\n            margin-left: -").concat(dimensions.marginLeft, "px;\n        ");
      spinner.innerHTML = "<img src=\"".concat(this.options.spinner.img, "\">");
      return spinner;
    }
  }, {
    key: "_stateInfo",
    value: function _stateInfo() {
      var dimensions = this._calculateDivDimensions(0.5);

      var info = document.createElement("div");
      var infoTotal = document.createElement("div");
      var infoTotalAmount = document.createElement("h3");
      var infoState = document.createElement("div");
      var infoStateEvent = document.createElement("span");
      var infoStateCountDown = document.createElement("h3");
      info.className = "".concat(this.className, "-roulette-info");
      infoTotal.className = "".concat(this.className, "-roulette-info-total");
      infoTotalAmount.className = "".concat(this.className, "-roulette-info-total-amount");
      infoState.className = "".concat(this.className, "-roulette-info-state");
      infoStateEvent.className = "".concat(this.className, "-roulette-info-state-event");
      infoStateCountDown.className = "".concat(this.className, "-roulette-info-state-countdown");
      infoTotal.innerHTML = "<span>".concat(this.options.messages.currentPot, "</span>");
      infoTotalAmount.innerHTML = '0.00';
      infoTotal.appendChild(infoTotalAmount);
      infoStateEvent.innerHTML = this.options.messages.nextRoundIn;
      infoStateCountDown.innerHTML = "0";
      infoState.appendChild(infoStateEvent);
      infoState.appendChild(infoStateCountDown);
      info.style.cssText = "\n            width: ".concat(dimensions.width, "px;\n            height: ").concat(dimensions.height, "px;\n            margin-top: -").concat(dimensions.marginTop, "px;\n            margin-left: -").concat(dimensions.marginLeft, "px;\n        ");
      infoTotal.style.cssText = "\n            height: ".concat(dimensions.height / 2, "px;\n        ");
      infoState.style.cssText = "\n            height: ".concat(dimensions.height / 2, "px;\n        ");
      info.appendChild(infoTotal);
      info.appendChild(infoState);
      return info;
    }
  }, {
    key: "_watchStep",
    value: function _watchStep() {
      var _this2 = this;

      this.round.on('child_changed', function (snapshot) {
        switch (snapshot.key) {
          case 'currentStep':
            var currentStep = snapshot.val();

            _this2._initStep(currentStep);

            break;

          case 'players':
            _this2.players = snapshot.val();

            _this2._buildWheel();

            _this2._buildRound();

            break;

          case 'winner':
            var winner = snapshot.val();
            _this2.ticket = winner.tickect;

            if (!winner.player) {
              _this2._addNotWinner();
            } else {
              for (var id in _this2.players) {
                if (id == winner.player) {
                  _this2._addWinner(_this2.players[id]);
                }
              }
            }

            break;
        }
      });
    }
  }, {
    key: "_watchRound",
    value: function _watchRound() {
      var _this3 = this;

      this.db.ref().on('child_changed', function (snapshot) {
        switch (snapshot.key) {
          case 'currentRound':
            _this3.id = snapshot.val();
            _this3.round = _this3.db.ref("/rounds/".concat(_this3.id));

            _this3.round.once('value').then(function (snapshot) {
              var data = snapshot.val();

              _this3._initRoulette();

              return data;
            }).then(function (data) {
              _this3._initStep(data.currentStep);

              _this3._watchStep();
            });

            break;
        }
      });
    }
  }, {
    key: "_watchConnection",
    value: function _watchConnection() {
      var _this4 = this;

      this.db.ref(".info/connected").on("value", function (snapshot) {
        if (snapshot.val() !== true && _this4.cn) {
          _this4._offline();
        } else {
          _this4.cn = true;
        }
      });
    }
  }, {
    key: "_addPlayer",
    value: function _addPlayer(data) {
      var _this5 = this;

      var roundInfo = document.querySelector(".".concat(this.className, "-round-info"));
      var player = document.createElement('div');
      var playerHighlight = document.createElement('div');
      var playerInfo = document.createElement('div');
      var playerSeparator = document.createElement('div');
      var playerDeposit = document.createElement('div');
      player.className = "".concat(this.className, "-round-player");
      player.dataset.round = this.id;
      playerHighlight.className = "".concat(this.className, "-round-player-highlight");
      playerInfo.className = "".concat(this.className, "-round-player-info jackpot-round-box");
      playerSeparator.className = "".concat(this.className, "-round-player-separator");
      playerDeposit.className = "".concat(this.className, "-round-player-deposit jackpot-round-box");
      player.style.cssText = "\n        background: linear-gradient(90deg, \n            rgba(".concat(data.color, ", 0.22) 0%,\n            rgba(").concat(data.color, ", 0.1) 10%,\n            rgba(").concat(data.color, ", 0.05) 20%,\n            rgba(0, 0, 0, 0.1) 35%,\n            rgba(0, 0, 0, 0.1) 100%)\n    ");
      playerHighlight.style.cssText = "background-color: rgb(".concat(data.color, ")");
      playerInfo.innerHTML = "\n        <span>".concat(data.info.name, "</span>\n        <h3 style=\"color: rgb(").concat(data.color, ");\">\n            ").concat((data.percent.start * 100).toFixed(4), " - ").concat((data.percent.end * 100).toFixed(4), "\n        </h3>\n    ");
      playerDeposit.innerHTML = "\n            <div><span>&nbsp;</span></div>\n            <h4>Total value ".concat(data.info.total, "</h4>\n    ");
      player.appendChild(playerInfo);
      player.appendChild(playerSeparator);
      player.appendChild(playerDeposit);
      player.appendChild(playerHighlight);
      player.addEventListener("click", function () {
        _this5.options.onClickPlayer(_this5, data);
      });
      roundInfo.prepend(player);
    }
  }, {
    key: "_addNotWinner",
    value: function _addNotWinner() {
      var roundInfo = document.querySelector(".".concat(this.className, "-round-info"));
      var player = document.createElement('div');
      var playerRound = document.createElement('div');
      var playerUser = document.createElement('div');
      player.className = "".concat(this.className, "-round-winner");
      player.dataset.round = this.id;
      playerRound.className = "".concat(this.className, "-round-winner-info");
      playerUser.className = "".concat(this.className, "-round-winner-nouser");
      player.style.cssText = "\n            background: linear-gradient(90deg,rgba(45,48,52,.7) 0,rgba(45,48,52,.4) 40%,rgba(45,48,52,.3) 70%,rgba(45,48,52,.2) 80%,rgba(45,48,52,.1) 100%);\n        ";
      playerRound.innerHTML = "\n            <h2>".concat(this.options.messages.roundEnded, "</h2>\n            <div>\n                <span><strong>Round</strong> #").concat(this.id, "</span>\n            </div>\n            <div>\n                <span><strong>Ticket</strong> #").concat(this.ticket, "</span>\n            </div>\n        ");
      playerUser.innerHTML = "<span>".concat(this.options.messages.noPlayers, "</span>");
      player.appendChild(playerRound);
      player.appendChild(playerUser);
      roundInfo.prepend(player);
    }
  }, {
    key: "_addWinner",
    value: function _addWinner(data) {
      var _this6 = this;

      var roundInfo = document.querySelector(".".concat(this.className, "-round-info"));
      var player = document.createElement('div');
      var playerRound = document.createElement('div');
      var playerUser = document.createElement('div');
      player.className = "".concat(this.className, "-round-winner");
      player.dataset.round = this.id;
      playerRound.className = "".concat(this.className, "-round-winner-info");
      playerUser.className = "".concat(this.className, "-round-winner-user");
      player.style.cssText = "\n            background: linear-gradient(90deg, \n                rgba(".concat(data.color, ", 0.5) 0%,\n                rgba(").concat(data.color, ", 0.4) 40%,\n                rgba(").concat(data.color, ", 0.3) 70%,\n                rgba(").concat(data.color, ", 0.2) 80%,\n                rgba(").concat(data.color, ", 0.1) 100%);\n        ");
      playerRound.innerHTML = "\n            <h2>ROUND ENDED</h2>\n            <div>\n                <span><strong>Round</strong> #".concat(this.id, "</span>\n            </div>\n            <div>\n                <span><strong>Ticket</strong> #").concat(this.ticket, "</span>\n            </div>\n        ");
      playerUser.innerHTML = "\n            <h3>".concat(data.info.name, "</h3>\n            <div>\n                <span><strong>").concat(this.getTotalCurrentRound(), "</strong> with <strong>").concat(((data.percent.end - data.percent.start) * 100).toFixed(2), "%</strong> chance</span>\n            </div>\n        ");
      player.appendChild(playerRound);
      player.appendChild(playerUser);
      player.addEventListener("click", function () {
        _this6.options.onClickWinner(_this6, data);
      });
      roundInfo.prepend(player);
    }
  }, {
    key: "_offline",
    value: function _offline() {
      var _this7 = this;

      return new Promise(function (resolve, reject) {
        document.querySelector(".".concat(_this7.className, "-roulette-info-state-event")).innerHTML = _this7.options.messages.lostConnection;
        document.querySelector(".".concat(_this7.className, "-roulette-info-state-countdown")).innerHTML = "Press F5";
        resolve(true);
      });
    }
  }, {
    key: "_countDown",
    value: function _countDown(start) {
      var _this8 = this;

      return new Promise(function (resolve, reject) {
        clearInterval(_this8.countDown);
        var now = new Date();
        var timestamp = parseInt("".concat(now.getTime()).slice(0, -3));
        var timeout = start - timestamp;
        var elm = document.querySelector(".".concat(_this8.className, "-roulette-info-state-countdown"));
        elm.innerHTML = timeout;
        _this8.countDown = setInterval(function () {
          timeout--;
          elm.innerHTML = timeout;

          if (timeout <= 0) {
            clearInterval(_this8.countDown);
            resolve(true);
          }
        }, 1000);
      });
    }
  }, {
    key: "_stepNextRound",
    value: function _stepNextRound(step) {
      document.querySelector(".".concat(this.className, "-roulette-info-state-event")).innerHTML = this.options.messages.nextRoundIn;
      return this._countDown(step.start);
    }
  }, {
    key: "_stepGameStart",
    value: function _stepGameStart(step) {
      var _this9 = this;

      document.querySelector(".".concat(this.className, "-roulette-info-state-event")).innerHTML = this.options.messages.gameStartIn;
      this.options.onGameStart(this);
      return this._countDown(step.start).then(function () {
        _this9.options.onGameEnd(_this9);
      });
    }
  }, {
    key: "_stepAwaiting",
    value: function _stepAwaiting() {
      var _this10 = this;

      return new Promise(function (resolve, reject) {
        document.querySelector(".".concat(_this10.className, "-roulette-info-state-countdown")).innerHTML = _this10.options.messages.awaiting;
        resolve(true);
      });
    }
  }, {
    key: "_stepRolling",
    value: function _stepRolling(step) {
      var _this11 = this;

      return new Promise(function (resolve, reject) {
        var now = new Date();
        var timestamp = parseInt("".concat(now.getTime()).slice(0, -3));
        var timeout = step.start - timestamp;
        document.querySelector(".".concat(_this11.className, "-roulette-info-state-event")).innerHTML = _this11.options.messages.rolling;
        document.querySelector(".".concat(_this11.className, "-roulette-info-state-countdown")).innerHTML = "";
        var spinner = document.querySelector(".".concat(_this11.className, "-roulette-spinner"));
        spinner.style.setProperty('transition', "all ".concat(timeout, "s"));
        spinner.style.cssText += "transform:rotate(" + step.position + "deg)";
        setTimeout(function () {
          resolve(true);
        }, timeout * 1000);
      });
    }
  }, {
    key: "_stepResult",
    value: function _stepResult(step) {
      var _this12 = this;

      return new Promise(function (resolve, reject) {
        document.querySelector(".".concat(_this12.className, "-roulette-info-state-countdown")).innerHTML = _this12.options.messages.results;
        resolve(true);
      });
    }
  }, {
    key: "_initRoulette",
    value: function _initRoulette() {
      var element = document.querySelector(this.options.roulette.container);
      var roulette = document.createElement('div');
      var wheel = document.createElement('div');

      var spinner = this._spinner();

      var info = this._stateInfo();

      roulette.className = "".concat(this.className, "-roulette");
      wheel.className = "".concat(this.className, "-roulette-wheel");
      wheel.appendChild(this._placeHolderRoulette());
      roulette.appendChild(wheel);
      roulette.appendChild(info);
      roulette.appendChild(spinner);
      element.innerHTML = "";
      element.appendChild(roulette);
    }
  }, {
    key: "_initRound",
    value: function _initRound() {
      var element = document.querySelector(this.options.round.container);
      var round = document.createElement('div');
      var roundInfo = document.createElement('div');
      round.className = "".concat(this.className, "-round");
      roundInfo.className = "".concat(this.className, "-round-info");
      round.appendChild(roundInfo);
      element.appendChild(round);
    }
  }, {
    key: "_initStep",
    value: function _initStep(step) {
      switch (step.id) {
        case 1:
          this._stepNextRound(step);

          break;

        case 2:
          this._stepGameStart(step);

          break;

        case 3:
          this._stepAwaiting();

          break;

        case 4:
          this._stepRolling(step);

          break;

        case 5:
          this._stepResult();

          break;
      }
    }
  }, {
    key: "_initFirebase",
    value: function _initFirebase() {
      firebase.initializeApp(this.options.firebase);
      this.firebase = firebase;
      this.db = this.firebase.database();
    }
  }, {
    key: "getTotalCurrentRound",
    value: function getTotalCurrentRound() {
      var total = 0;

      for (var key in this.players) {
        total += this.players[key].info.total;
      }

      return total;
    }
  }, {
    key: "bidUp",
    value: function bidUp(player) {
      this.players.push({
        info: player,
        color: this._colorRandom(),
        degrees: [],
        percent: 0
      });

      this._buildWheel();
    }
  }, {
    key: "init",
    value: function init() {
      var _this13 = this;

      this._initRoulette();

      this._initRound();

      this._watchConnection();

      this.db.ref('/currentRound').once('value').then(function (snapshot) {
        _this13.id = snapshot.val();
        return _this13.db.ref("/rounds/".concat(_this13.id));
      }).then(function (round) {
        _this13.round = round;
        return _this13.round.once('value').then(function (snapshot) {
          var data = snapshot.val();
            if (data.players) {
              _this13.players = data.players;

              _this13._buildWheel();

              _this13._buildRound();
            }
          return data;
        });
      }).then(function (data) {
        _this13._initStep(data.currentStep);

        _this13._watchStep();
      });
    }
  }]);

  return JackPot;
}();